import java.io.Closeable;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;

import javax.swing.text.html.HTMLDocument.Iterator;

import com.cosmian.jna.findex.ffi.FilterObsoleteLocations;
import com.cosmian.jna.findex.ffi.FindexUserCallbacks.DBFilterObsoleteLocations;
import com.cosmian.jna.findex.structs.Location;
import com.cosmian.utils.CloudproofException;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;

public class RedisConnection implements Closeable {

    public static final byte[] STORAGE_PREFIX = "cosmian".getBytes(StandardCharsets.UTF_8);

    private final JedisPool pool;

    public static final int DATA_TABLE_INDEX = 3;

    private final String redisPassword;

    /**
     * Internal constructor instantiating from an existing pool and loading the Conditional Upsert Lua script
     *
     * @param pool the existing {@link JedisPool}
     * @param redisPassword the password to use to authenticate
     */
    protected RedisDb(JedisPool pool, String redisPassword) {
        this.pool = pool;
        this.redisPassword = redisPassword;
    }

    /**
     * Instantiate a Redis instance from a URI
     *
     * @param uri the URI to the Redis server
     */
    public RedisDb(String uri) {
        this(new JedisPool(uri), redisPassword());
    }

    /**
     * Instantiate a Redis instance from a server hostname and port passed as environment variables
     */
    public RedisDb() {
        this(new JedisPool(redisHostname(), redisPort()), redisPassword());
    }

    /**
     * Instantiate a new Redis Client
     *
     * @param hostname the REST Server URL e.g. localhost
     * @param port Sets a specified port value e.g 6379
     * @param password the authentication password or token
     */
    public RedisDb(String hostname, int port, String password) {
        this(new JedisPool(hostname, port), password);
    }

    /**
     * Get a Jedis connection from the pool, authenticating it if needed
     *
     * @return the {@link Jedis} connection
     */
    protected Jedis getJedis() {
        Jedis jedis = pool.getResource();
        if (redisPassword() != null) {
            jedis.auth(this.redisPassword);
        }
        return jedis;
    }

    /**
     * The Redis server hostname from the REDIS_HOSTNAME environment variable. Defaults to localhost if not found.
     *
     * @return the hostname
     */
    static String redisHostname() {
        String v = System.getenv("REDIS_HOSTNAME");
        if (v == null) {
            return "localhost";
        }
        return v;
    }

    /**
     * The Redis server port from the REDIS_PORT environment variable. Defaults to 6379 if not found.
     *
     * @return the port
     */
    static int redisPort() {
        String v = System.getenv("REDIS_PORT");
        if (v == null) {
            return 6379;
        }
        return Integer.parseInt(v);
    }

    /**
     * The Redis server password from the REDIS_PASSWORD environment variable. Defaults to null if not found.
     *
     * @return the password
     */
    public static String redisPassword() {
        String v = System.getenv("REDIS_PASSWORD");
        return v;
    }

    /**
     * Format Redis key as NUMBER:HEX_UID
     *
     * @param number the index of the table
     * @param uid the {@link Uid32} value of the key
     * @return key as prefix|number on 4 bytes|uid
     */
    public static byte[] key(int number,
                             byte[] uid) {
        byte[] numberBytes = ByteBuffer.allocate(4).order(ByteOrder.BIG_ENDIAN).putInt(number).array();
        byte[] result = Arrays.copyOf(STORAGE_PREFIX, STORAGE_PREFIX.length + numberBytes.length + uid.length);
        System.arraycopy(numberBytes, 0, result, STORAGE_PREFIX.length, numberBytes.length);
        System.arraycopy(uid, 0, result, STORAGE_PREFIX.length + numberBytes.length, uid.length);
        return result;
    }

}
